#!/usr/bin/env escript

main(Args) -> setdir(), dispatch(Args).

dispatch(["bootstrap"]) -> bootstrap();
dispatch(["update"]) -> update();
dispatch(["make"]) -> make();
dispatch(["clean"|All]) -> clean(All);
dispatch(_) -> 
    io:format("Usage: ./zinc [bootstrap | update | make | clean [all]]~n", []).


%=======================================================
% Comands
%=======================================================

bootstrap() ->
    shell("git submodule init"),
    update(),
    create_schema().


update() ->
    shell("git pull git://github.com/TomMc/ZincBB.git master"),
    shell("git submodule update"),
    make().


make() ->
    make:all().


clean(["all"]) ->
    [file:delete(F) || F <- filelib:wildcard("./lib/*/ebin/*.beam")];
clean(_) ->
    [file:delete(F) || F <- filelib:wildcard("./lib/zincBB/ebin/*.beam")].


%=======================================================
% Internal 
%=======================================================

setdir() ->
    Dir = filename:dirname(escript:script_name()),
    file:set_cwd(Dir).


create_schema() ->
    filelib:ensure_dir("./mnesia"),
    application:set_env(mnesia, dir, "./mnesia"),
    {ok, _} = net_kernel:start([zincBB, shortnames]),
    
    mnesia:stop(),
    mnesia:create_schema([node()]),

    ok = mnesia:start(),
    true = code:add_path("./lib/zincBB/ebin"),
    {module, M} = code:ensure_loaded(znbb_mnesia_db),
    case M:create_tables() of 
        {atomic, ok} -> 
            io:format("Schema created.~n", []);
        {aborted, {already_exists, Table}} -> 
            io:format("Table ~p already exists~n", [Table])
    end,
    mnesia:stop().


shell(Cmd) ->
    io:format("Zinc: => ~s~n", [Cmd]),
    case os:cmd(Cmd) of
        [] -> io:format("ok~n", []);
        Resp -> io:format("~s~n", [Resp])
    end.
